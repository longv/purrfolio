---
import type { ImageMetadata } from "astro";
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"div"> {
  src: ImageMetadata;
  totalFrames: number;
  scale?: number;
}

const { src, totalFrames, scale = 3, ...props } = Astro.props;
const height = src.height;
const width = src.width / totalFrames;
const playTime = `${totalFrames / 5}s`; // 5 fps
---

<div {...props}>
  <div
    class={"relative overflow-hidden"}
    style={{ width: `${width * scale}px`, height: `${height * scale}px` }}
  >
    <img
      data-srpitesheet
      class={"max-w-none absolute rendering-pixelated"}
      style={{
        width: `${src.width * scale}px`,
        height: `${src.height * scale}px`,
      }}
      src={src.src}
      alt="Spritesheet"
    />
  </div>
</div>

<style define:vars={{ playTime, totalFrames }}>
  [data-srpitesheet] {
    animation-name: moveSpritesheet;
    animation-duration: var(--playTime);
    animation-iteration-count: infinite;
    animation-timing-function: steps(var(--totalFrames));
  }

  @keyframes moveSpritesheet {
    from {
      transform: translate3d(0px, 0, 0);
    }
    to {
      transform: translate3d(-100%, 0, 0);
    }
  }
</style>
